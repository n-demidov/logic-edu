package com.demidovn.fruitbounty.game.services.game.generating.miniquests.validators.numanswers._n_to_n_subjectsToObjects

import com.demidovn.fruitbounty.game.model.quest.OutOfStatements
import com.demidovn.fruitbounty.game.services.game.generating.miniquests.validators.numanswers.BaseValidatorTest
import com.demidovn.fruitbounty.game.services.game.generating.miniquests.validators.numanswers.NumAnswersExecutor

class CheckGlobalRightAnswersValidatorTest extends BaseValidatorTest {

    def "should valid, 1 rightAnswer"() {
        setup:
        Map<Integer, Integer> globalRightAnswers = new HashMap<>()
        for (int row = 0; row < rAnswers.size(); row++) {
            List<Integer> columns = rAnswers[row]
            globalRightAnswers.put(columns.get(0), columns.get(1))
        }

        List<List<Boolean>> truePhrases = [[T, F], [T, F], [T, F]]

        expect:
        !numAnswersExecutor.apply(subjectsIdxs, objectsIdxs, inverses, truePhrases, rangeIdxs, rangeIdxs,
                trgSubj, trgObj, 1, 0, MAX_INT, SKIP, ANY, globalRightAnswers).contains(!result)

        where:
        subjectsIdxs             | objectsIdxs              | inverses                 | rangeIdxs    | trgSubj | trgObj | rAnswers                         | result
        /* 4*4
           a0  b1 TF/FT
           a1  c2 FT/FT
           b!2 d2 TF/TF
           (a0 b3 c2 d1) OR (a3 b1 c2 d0) */
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 2       | 2      | [[2, 2]]                         | true
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 2       | 2      | [[2, 0]]                         | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 2       | 2      | [[2, 1]]                         | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 2       | 2      | [[2, 3]]                         | false

        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 2       | 2      | [[0, 0]]                         | true
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 2       | 2      | [[0, 1]]                         | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 2       | 2      | [[0, 2]]                         | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 2       | 2      | [[0, 3]]                         | true

        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 2       | 2      | [[0, 0], [1, 3]]                 | true
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 2       | 2      | [[0, 3], [1, 1]]                 | true
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 2       | 2      | [[0, 0], [3, 1]]                 | true
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 2       | 2      | [[0, 3], [3, 0]]                 | true

        // (a0 b3 c2 d1)
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 2       | 2      | [[0, 0], [1, 3], [2, 2], [3, 1]] | true
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 2       | 2      | [[0, 1], [1, 3], [2, 2], [3, 1]] | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 2       | 2      | [[0, 0], [1, 2], [2, 2], [3, 1]] | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 2       | 2      | [[0, 0], [1, 3], [2, 2], [3, 0]] | false

        // (a3 b1 c2 d0)
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 2       | 2      | [[0, 3], [1, 1], [2, 2], [3, 0]] | true
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 2       | 2      | [[0, 1], [1, 1], [2, 2], [3, 0]] | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 2       | 2      | [[0, 3], [1, 2], [2, 2], [3, 0]] | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 2       | 2      | [[0, 3], [1, 1], [2, 0], [3, 0]] | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 2       | 2      | [[0, 3], [1, 1], [2, 2], [3, 2]] | false

        // Right answers from both branches, but not fully right in each.
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 2       | 2      | [[0, 0], [1, 3], [2, 2], [3, 0]] | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 2       | 2      | [[0, 3], [1, 3], [2, 2], [3, 0]] | false

        // Answers are right, but from different branches
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 2       | 2      | [[0, 0], [1, 1]]                 | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 2       | 2      | [[0, 3], [3, 1]]                 | false

        // Cause 2 rightAnswers
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 0       | 0      | [[0, 0], [1, 3], [2, 2], [3, 1]] | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 0       | 1      | [[0, 0], [1, 3], [2, 2], [3, 1]] | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 0       | 2      | [[0, 0], [1, 3], [2, 2], [3, 1]] | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 0       | 3      | [[0, 0], [1, 3], [2, 2], [3, 1]] | false
    }

    def "should valid, 2 rightAnswers"() {
        setup:
        Map<Integer, Integer> globalRightAnswers = new HashMap<>()
        for (int row = 0; row < rAnswers.size(); row++) {
            List<Integer> columns = rAnswers[row]
            globalRightAnswers.put(columns.get(0), columns.get(1))
        }

        List<List<Boolean>> truePhrases = [[T, F], [T, F], [T, F]]

        expect:
        !numAnswersExecutor.apply(subjectsIdxs, objectsIdxs, inverses, truePhrases, rangeIdxs, rangeIdxs,
                trgSubj, trgObj, 2, 0, MAX_INT, SKIP, ANY, globalRightAnswers).contains(!result)

        where:
        subjectsIdxs             | objectsIdxs              | inverses                 | rangeIdxs    | trgSubj | trgObj | rAnswers                         | result
        /* 4*4
           a0  b1 TF/FT
           a1  c2 FT/FT
           b!2 d2 TF/TF
           (a0 b3 c2 d1) OR (a3 b1 c2 d0) */
        // rightAnswer is different from the branch (a0 b3 c2 d1)
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 0       | 0      | [[0, 0], [1, 3], [2, 2], [3, 1]] | true
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 0       | 1      | [[0, 0], [1, 3], [2, 2], [3, 1]] | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 0       | 2      | [[0, 0], [1, 3], [2, 2], [3, 1]] | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 0       | 3      | [[0, 0], [1, 3], [2, 2], [3, 1]] | false

        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 1       | 0      | [[0, 0], [1, 3], [2, 2], [3, 1]] | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 1       | 1      | [[0, 0], [1, 3], [2, 2], [3, 1]] | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 1       | 2      | [[0, 0], [1, 3], [2, 2], [3, 1]] | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 1       | 3      | [[0, 0], [1, 3], [2, 2], [3, 1]] | true

        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 2       | 0      | [[0, 0], [1, 3], [2, 2], [3, 1]] | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 2       | 1      | [[0, 0], [1, 3], [2, 2], [3, 1]] | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 2       | 2      | [[0, 0], [1, 3], [2, 2], [3, 1]] | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 2       | 3      | [[0, 0], [1, 3], [2, 2], [3, 1]] | false

        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 3       | 0      | [[0, 0], [1, 3], [2, 2], [3, 1]] | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 3       | 1      | [[0, 0], [1, 3], [2, 2], [3, 1]] | true
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 3       | 2      | [[0, 0], [1, 3], [2, 2], [3, 1]] | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 3       | 3      | [[0, 0], [1, 3], [2, 2], [3, 1]] | false

        // rightAnswer is different from the branch. Another branch (a3 b1 c2 d0).
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 0       | 0      | [[0, 3], [1, 1], [2, 2], [3, 0]] | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 0       | 1      | [[0, 3], [1, 1], [2, 2], [3, 0]] | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 0       | 2      | [[0, 3], [1, 1], [2, 2], [3, 0]] | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 0       | 3      | [[0, 3], [1, 1], [2, 2], [3, 0]] | true

        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 1       | 0      | [[0, 3], [1, 1], [2, 2], [3, 0]] | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 1       | 1      | [[0, 3], [1, 1], [2, 2], [3, 0]] | true
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 1       | 2      | [[0, 3], [1, 1], [2, 2], [3, 0]] | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 1       | 3      | [[0, 3], [1, 1], [2, 2], [3, 0]] | false

        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 2       | 0      | [[0, 3], [1, 1], [2, 2], [3, 0]] | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 2       | 1      | [[0, 3], [1, 1], [2, 2], [3, 0]] | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 2       | 2      | [[0, 3], [1, 1], [2, 2], [3, 0]] | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 2       | 3      | [[0, 3], [1, 1], [2, 2], [3, 0]] | false

        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 3       | 0      | [[0, 3], [1, 1], [2, 2], [3, 0]] | true
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 3       | 1      | [[0, 3], [1, 1], [2, 2], [3, 0]] | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 3       | 2      | [[0, 3], [1, 1], [2, 2], [3, 0]] | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 3       | 3      | [[0, 3], [1, 1], [2, 2], [3, 0]] | false

        // There isn't filtering by globalRightAnswer
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 0       | 0      | [[1, 3], [2, 2], [3, 1]]         | true
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 0       | 1      | [[1, 3], [2, 2], [3, 1]]         | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 0       | 2      | [[1, 3], [2, 2], [3, 1]]         | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 0       | 3      | [[1, 3], [2, 2], [3, 1]]         | true

        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 1       | 0      | [[0, 0], [2, 2], [3, 1]]         | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 1       | 1      | [[0, 0], [2, 2], [3, 1]]         | true
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 1       | 2      | [[0, 0], [2, 2], [3, 1]]         | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 1       | 3      | [[0, 0], [2, 2], [3, 1]]         | true

        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 2       | 0      | [[0, 0], [1, 3], [3, 1]]         | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 2       | 1      | [[0, 0], [1, 3], [3, 1]]         | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 2       | 2      | [[0, 0], [1, 3], [3, 1]]         | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 2       | 3      | [[0, 0], [1, 3], [3, 1]]         | false

        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 3       | 0      | [[0, 0], [1, 3], [2, 2]]         | true
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 3       | 1      | [[0, 0], [1, 3], [2, 2]]         | true
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 3       | 2      | [[0, 0], [1, 3], [2, 2]]         | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 3       | 3      | [[0, 0], [1, 3], [2, 2]]         | false

        // Invalid situations (contradictions with globalRightAnswers)
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 0       | 0      | [[0, 1], [1, 3], [2, 2], [3, 1]] | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 0       | 0      | [[0, 0], [1, 2], [2, 2], [3, 1]] | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 0       | 0      | [[0, 0], [1, 3], [2, 0], [3, 1]] | false
        [[0, 1], [0, 2], [1, 3]] | [[0, 1], [1, 2], [2, 2]] | [[F, F], [F, F], [T, F]] | [0, 1, 2, 3] | 0       | 0      | [[0, 0], [1, 3], [2, 2], [3, 3]] | false
    }

    def "should valid when gaps in range, 2 rightAnswers"() {
        setup:
        Map<Integer, Integer> globalRightAnswers = new HashMap<>()
        for (int row = 0; row < rAnswers.size(); row++) {
            List<Integer> columns = rAnswers[row]
            globalRightAnswers.put(columns.get(0), columns.get(1))
        }

        List<List<Boolean>> truePhrases = [[T, F], [T, F], [T, F]]

        expect:
        !numAnswersExecutor.apply(subjectsIdxs, objectsIdxs, inverses, truePhrases, rangeIdxs, rangeIdxs,
                trgSubj, trgObj, 2, 0, MAX_INT, SKIP, ANY, globalRightAnswers).contains(!result)

        where:
        subjectsIdxs             | objectsIdxs              | inverses                 | rangeIdxs    | trgSubj | trgObj | rAnswers                         | result
        /* 4*4
           a8  b1 TF/FT
           a1  c5 FT/FT
           b!5 d5 TF/TF
           (a8 b3 c5 d1) OR (a3 b1 c5 d8) */
        // rightAnswer is different from the branch (a8 b3 c5 d1)
        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 8       | 8      | [[8, 8], [1, 3], [5, 5], [3, 1]] | true
        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 8       | 1      | [[8, 8], [1, 3], [5, 5], [3, 1]] | false
        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 8       | 5      | [[8, 8], [1, 3], [5, 5], [3, 1]] | false
        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 8       | 3      | [[8, 8], [1, 3], [5, 5], [3, 1]] | false

        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 1       | 8      | [[8, 8], [1, 3], [5, 5], [3, 1]] | false
        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 1       | 1      | [[8, 8], [1, 3], [5, 5], [3, 1]] | false
        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 1       | 5      | [[8, 8], [1, 3], [5, 5], [3, 1]] | false
        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 1       | 3      | [[8, 8], [1, 3], [5, 5], [3, 1]] | true

        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 5       | 8      | [[8, 8], [1, 3], [5, 5], [3, 1]] | false
        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 5       | 1      | [[8, 8], [1, 3], [5, 5], [3, 1]] | false
        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 5       | 5      | [[8, 8], [1, 3], [5, 5], [3, 1]] | false
        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 5       | 3      | [[8, 8], [1, 3], [5, 5], [3, 1]] | false

        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 3       | 8      | [[8, 8], [1, 3], [5, 5], [3, 1]] | false
        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 3       | 1      | [[8, 8], [1, 3], [5, 5], [3, 1]] | true
        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 3       | 5      | [[8, 8], [1, 3], [5, 5], [3, 1]] | false
        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 3       | 3      | [[8, 8], [1, 3], [5, 5], [3, 1]] | false

        // rightAnswer is different from the branch. Another branch (a3 b1 c5 d8).
        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 8       | 8      | [[8, 3], [1, 1], [5, 5], [3, 8]] | false
        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 8       | 1      | [[8, 3], [1, 1], [5, 5], [3, 8]] | false
        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 8       | 5      | [[8, 3], [1, 1], [5, 5], [3, 8]] | false
        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 8       | 3      | [[8, 3], [1, 1], [5, 5], [3, 8]] | true

        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 1       | 8      | [[8, 3], [1, 1], [5, 5], [3, 8]] | false
        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 1       | 1      | [[8, 3], [1, 1], [5, 5], [3, 8]] | true
        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 1       | 5      | [[8, 3], [1, 1], [5, 5], [3, 8]] | false
        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 1       | 3      | [[8, 3], [1, 1], [5, 5], [3, 8]] | false

        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 5       | 8      | [[8, 3], [1, 1], [5, 5], [3, 8]] | false
        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 5       | 1      | [[8, 3], [1, 1], [5, 5], [3, 8]] | false
        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 5       | 5      | [[8, 3], [1, 1], [5, 5], [3, 8]] | false
        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 5       | 3      | [[8, 3], [1, 1], [5, 5], [3, 8]] | false

        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 3       | 8      | [[8, 3], [1, 1], [5, 5], [3, 8]] | true
        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 3       | 1      | [[8, 3], [1, 1], [5, 5], [3, 8]] | false
        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 3       | 5      | [[8, 3], [1, 1], [5, 5], [3, 8]] | false
        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 3       | 3      | [[8, 3], [1, 1], [5, 5], [3, 8]] | false

        // There isn't filtering by globalRightAnswer
        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 8       | 8      | [[1, 3], [5, 5], [3, 1]]         | true
        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 8       | 1      | [[1, 3], [5, 5], [3, 1]]         | false
        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 8       | 5      | [[1, 3], [5, 5], [3, 1]]         | false
        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 8       | 3      | [[1, 3], [5, 5], [3, 1]]         | true

        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 1       | 8      | [[8, 8], [5, 5], [3, 1]]         | false
        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 1       | 1      | [[8, 8], [5, 5], [3, 1]]         | true
        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 1       | 5      | [[8, 8], [5, 5], [3, 1]]         | false
        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 1       | 3      | [[8, 8], [5, 5], [3, 1]]         | true

        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 5       | 8      | [[8, 8], [1, 3], [3, 1]]         | false
        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 5       | 1      | [[8, 8], [1, 3], [3, 1]]         | false
        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 5       | 5      | [[8, 8], [1, 3], [3, 1]]         | false
        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 5       | 3      | [[8, 8], [1, 3], [3, 1]]         | false

        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 3       | 8      | [[8, 8], [1, 3], [5, 5]]         | true
        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 3       | 1      | [[8, 8], [1, 3], [5, 5]]         | true
        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 3       | 5      | [[8, 8], [1, 3], [5, 5]]         | false
        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 3       | 3      | [[8, 8], [1, 3], [5, 5]]         | false

        // Invalid situations (contradictions with globalRightAnswers)
        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 8       | 8      | [[8, 1], [1, 3], [5, 5], [3, 1]] | false
        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 8       | 8      | [[8, 8], [1, 5], [5, 5], [3, 1]] | false
        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 8       | 8      | [[8, 8], [1, 3], [5, 8], [3, 1]] | false
        [[8, 1], [8, 5], [1, 3]] | [[8, 1], [1, 5], [5, 5]] | [[F, F], [F, F], [T, F]] | [8, 1, 5, 3] | 8       | 8      | [[8, 8], [1, 3], [5, 5], [3, 3]] | false
    }

    NumAnswersExecutor numAnswersExecutor = new NumAnswersExecutor()

}
